import { handleError } from './path-to-handleError-file';

describe('handleError', () => {
  it('should return a promise with error for string input', async () => {
    const error = 'This is a string error';

    await expect(handleError(error).toPromise()).rejects.toThrow('This is a string error');
  });

  it('should handle a client-side ErrorEvent and return a promise', async () => {
    const errorEvent = {
      error: {
        message: 'Client error message'
      }
    } as ErrorEvent;

    await expect(handleError(errorEvent).toPromise()).rejects.toThrow('An error occurred in client: Client error message');
  });

  it('should handle a server-side error and return a promise', async () => {
    const backendError = {
      status: 500,
      message: 'Server error occurred'
    };

    await expect(handleError(backendError).toPromise()).rejects.toThrow('Error Code: 500\nMessage: Server error occurred');
  });
});
