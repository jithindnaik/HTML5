// app.state.ts
import { State, Selector } from '@ngxs/store';

export interface AppStateModel {
  loading: { [key: string]: boolean };
}

@State<AppStateModel>({
  name: 'app',
  defaults: {
    loading: {}
  }
})
export class AppState {
  @Selector()
  static isLoading(state: AppStateModel): (key: string) => boolean {
    return (apiKey: string) => state.loading[apiKey];
  }
}



// app.module.ts
import { NgModule } from '@angular/core';
import { NgxsModule } from '@ngxs/store';
import { AppState } from './app.state';

@NgModule({
  imports: [
    NgxsModule.forRoot([AppState])
    // other imports...
  ],
  // declarations, providers, etc.
})
export class AppModule {}

// some.component.ts
import { Component, OnInit } from '@angular/core';
import { Store } from '@ngxs/store';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
import { LoadDataAction, StopLoadingAction } from './actions'; // Create these actions

@Component({
  selector: 'app-some',
  template: `
    <div *ngIf="isLoading$ | async">Loading...</div>
    <!-- Your component content here -->
  `
})
export class SomeComponent implements OnInit {
  isLoading$: Observable<boolean>;

  constructor(private store: Store) {}

  ngOnInit(): void {
    const apiKey = 'someApi'; // You can use a unique identifier for each API call

    // Dispatch action to start loading
    this.store.dispatch(new LoadDataAction(apiKey));

    // Make your API call
    this.loadData().subscribe(
      data => {
        // Process data here
      },
      error => {
        // Handle error
      },
      () => {
        // Dispatch action to stop loading
        this.store.dispatch(new StopLoadingAction(apiKey));
      }
    );

    // Select loading state for this API call
    this.isLoading$ = this.store.select(AppState.isLoading).pipe(
      tap(isLoadingSelector => isLoadingSelector(apiKey))
    );
  }

  loadData(): Observable<any> {
    // Make your API call here
  }
}

// actions.ts
import { Injectable } from '@angular/core';
import { Action, State, StateContext } from '@ngxs/store';

export class LoadDataAction {
  static readonly type = '[App] Load Data';
  constructor(public apiKey: string) {}
}

export class StopLoadingAction {
  static readonly type = '[App] Stop Loading';
  constructor(public apiKey: string) {}
}

@Injectable()
export class AppActions {
  @Action(LoadDataAction)
  loadData(ctx: StateContext<AppStateModel>, action: LoadDataAction) {
    // Start loading for the specified API call
    const state = ctx.getState();
    ctx.patchState({
      loading: {
        ...state.loading,
        [action.apiKey]: true
      }
    });
  }

  @Action(StopLoadingAction)
  stopLoading(ctx: StateContext<AppStateModel>, action: StopLoadingAction) {
    // Stop loading for the specified API call
    const state = ctx.getState();
    ctx.patchState({
      loading: {
        ...state.loading,
        [action.apiKey]: false
      }
    });
  }
}




