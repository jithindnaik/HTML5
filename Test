import { Utils } from './utils';

describe('Utils', () => {
  // 1. Test for isNullOrUndefinedOrEmpty
  describe('isNullOrUndefinedOrEmpty', () => {
    test('should return true for null', () => {
      expect(Utils.isNullOrUndefinedOrEmpty(null)).toBe(true);
    });

    test('should return true for undefined', () => {
      expect(Utils.isNullOrUndefinedOrEmpty(undefined)).toBe(true);
    });

    test('should return true for empty string', () => {
      expect(Utils.isNullOrUndefinedOrEmpty('')).toBe(true);
    });

    test('should return false for non-empty string', () => {
      expect(Utils.isNullOrUndefinedOrEmpty('hello')).toBe(false);
    });

    test('should return false for other types (number, object)', () => {
      expect(Utils.isNullOrUndefinedOrEmpty(123)).toBe(false);
      expect(Utils.isNullOrUndefinedOrEmpty({})).toBe(false);
    });
  });

  // 2. Test for truncateText
  describe('truncateText', () => {
    test('should truncate string if length exceeds the limit', () => {
      expect(Utils.truncateText('Hello World', 5)).toBe('Hello...');
    });

    test('should return the full string if length is within the limit', () => {
      expect(Utils.truncateText('Hello', 10)).toBe('Hello');
    });

    test('should handle empty string', () => {
      expect(Utils.truncateText('', 5)).toBe('');
    });
  });

  // 3. Test for findNestedElementDetails (assumes certain object structure)
  describe('findNestedElementDetails', () => {
    const mockObject = {
      a: {
        b: {
          c: 42
        }
      }
    };

    const findFunction = (value: any, key: any) => value === 42; // Example search function

    test('should find nested element and return correct details', () => {
      const result = Utils.findNestedElementDetails(findFunction, mockObject);
      expect(result).toEqual({ parents: ['a', 'b'], path: ['a', 'b', 'c'], node: 42 });
    });

    test('should return undefined for elements not found', () => {
      const result = Utils.findNestedElementDetails((val: any) => val === 100, mockObject);
      expect(result).toEqual(undefined);
    });
  });

  // 4. Test for getEnumValueByEnumKey
  describe('getEnumValueByEnumKey', () => {
    const mockEnum = { A: 'Value A', B: 'Value B' };

    test('should return the correct enum value for a valid key', () => {
      expect(Utils.getEnumValueByEnumKey(mockEnum, 'A')).toBe('Value A');
    });

    test('should return undefined for an invalid key', () => {
      expect(Utils.getEnumValueByEnumKey(mockEnum, 'Z')).toBe(undefined);
    });
  });
});
