import { Router } from './yourRouterModule'; // Adjust your import according to your file
import { Params } from './yourParamsModule'; // Adjust this to match your actual Params type

describe('openInNewTabWithQueryParams', () => {
  const mockRouter = {
    createUrlTree: jest.fn().mockReturnValue({
      toString: jest.fn().mockReturnValue('testPath'),
    }),
  } as unknown as Router;

  beforeEach(() => {
    jest.spyOn(window, 'open').mockImplementation(() => {});
    jest.spyOn(window, 'location', 'get').mockReturnValue({
      href: 'http://localhost',
    } as any);
  });

  afterEach(() => {
    jest.restoreAllMocks();
  });

  it('should open a new tab with query params', () => {
    const params: Params = { queryParams: { test: '123' } };
    const namedRoute = 'testRoute';

    openInNewTabWithQueryParams(mockRouter, namedRoute, params);

    expect(mockRouter.createUrlTree).toHaveBeenCalledWith(['testRoute']);
    expect(window.open).toHaveBeenCalledWith('http://localhost/testPath?test=123', '_blank', 'noopener');
  });

  it('should open a new tab without query params when params are null', () => {
    const params: Params = { queryParams: null };
    const namedRoute = 'testRoute';

    openInNewTabWithQueryParams(mockRouter, namedRoute, params);

    expect(mockRouter.createUrlTree).toHaveBeenCalledWith(['testRoute']);
    expect(window.open).toHaveBeenCalledWith('http://localhost/testPath', '_blank', 'noopener');
  });
});




describe('openInNewTabWithRouterParams', () => {
  const mockRouter = {
    createUrlTree: jest.fn().mockReturnValue({
      toString: jest.fn().mockReturnValue('testPath'),
    }),
  } as unknown as Router;

  beforeEach(() => {
    jest.spyOn(window, 'open').mockImplementation(() => {});
    jest.spyOn(window, 'location', 'get').mockReturnValue({
      href: 'http://localhost',
    } as any);
  });

  afterEach(() => {
    jest.restoreAllMocks();
  });

  it('should open a new tab with router params', () => {
    openInNewTabWithRouterParams('testRoute', mockRouter);

    expect(mockRouter.createUrlTree).toHaveBeenCalledWith(['testRoute']);
    expect(window.open).toHaveBeenCalledWith('http://localhost/testPath', '_blank', 'noopener');
  });
});


describe('listToTree', () => {
  it('should convert a list to a tree structure', () => {
    const list = [
      { id: 1, groupId: '1', parentGroupId: null },
      { id: 2, groupId: '2', parentGroupId: '1' },
      { id: 3, groupId: '3', parentGroupId: '1' },
      { id: 4, groupId: '4', parentGroupId: '2' },
    ];

    const expectedTree = [
      {
        id: 1,
        groupId: '1',
        parentGroupId: null,
        children: [
          {
            id: 2,
            groupId: '2',
            parentGroupId: '1',
            children: [
              {
                id: 4,
                groupId: '4',
                parentGroupId: '2',
                children: [],
              },
            ],
          },
          {
            id: 3,
            groupId: '3',
            parentGroupId: '1',
            children: [],
          },
        ],
      },
    ];

    const result = listToTree(list, 'groupId', 'parentGroupId');
    expect(result).toEqual(expectedTree);
  });

  it('should handle an empty list', () => {
    const result = listToTree([], 'groupId', 'parentGroupId');
    expect(result).toEqual([]);
  });

  it('should handle a single node with no children', () => {
    const list = [
      { id: 1, groupId: '1', parentGroupId: null },
    ];

    const expectedTree = [
      {
        id: 1,
        groupId: '1',
        parentGroupId: null,
        children: [],
      },
    ];

    const result = listToTree(list, 'groupId', 'parentGroupId');
    expect(result).toEqual(expectedTree);
  });
});

